name: Automation Master Workflow

# Controls when the workflow will run
on:
  # Allows you to run this workflow from another workflow
  workflow_call:
    outputs:
      quality_gate: 
        description: "Results from Skyline Quality Gate."
        value:  ${{ jobs.validate_skyline_quality_gate.outputs.quality}}
      #artifact-id-release: 
      artifact-id: 
        description: "Artifact ID of uploaded Package if successful."
        value:  ${{ jobs.artifact_creation_registration.outputs.artifact-id }}
      # artifact-id-development: 
      #   description: "Artifact ID of dev uploaded Package if successful."
    inputs:
      referenceName:
        required: true
        type: string       
      runNumber:
        required: true
        type: string   
      referenceType:
        required: true
        type: string   
      repository:
        required: true
        type: string 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  validate_skyline_quality_gate:
    name: Skyline Quality Gate 
    runs-on: windows-latest
    outputs:
      quality: ${{ steps.quality-step.outputs.results}}
    steps:
      - uses: actions/checkout@v3
      - name: Initialize
        run: |
          echo "workspace" ${{ github.workspace }}
          echo "ref name" ${{ inputs.referenceName }}
          echo "run number" ${{ inputs.runNumber }}
          echo "ref type" ${{ inputs.referenceType }}
          echo "repository" ${{ inputs.repository }}
      - name: Detect Solution
        run: echo "todo"
      - name: Validate Solution
        run: echo "todo"
      - name: Prepare Solution
        run: echo "todo"
      - name: Validate Possible Dependency NuGets
        run: echo "todo"
      - name: Sync DIS version
        run: echo "todo"  
      - name: Prepare Building
        uses: microsoft/setup-msbuild@v1 
      - name: Restore NuGet
        run: nuget restore
      - name: Building     
        run: msbuild.exe AutomationScript.sln /clp:ErrorsOnly /fileLogger /flp:errorsonly /nologo /t:Clean,Restore,Build /p:Configuration=Release /p:ReferencePath="${{ github.workspace }}\Dlls" # /verbosity:minimal
      - name: Scan Test Projects
        run: echo "todo"  
      - name: Prepare Unit Tests
        uses: darenm/Setup-VSTest@v1
      - name: Unit Tests
        run: vstest.console.exe **\bin\**\*.UnitTests.dll **\bin\**\*.Tests.dll **\bin\**\*Tests.dll /logger:trx # https://learn.microsoft.com/en-us/visualstudio/test/vstest-console-options?view=vs-2022
        #run: vstest.console.exe **\bin\**\*TestsTest.dll /logger:trx -- RunConfiguration.TreatNoTestsAsError=false # https://learn.microsoft.com/en-us/visualstudio/test/vstest-console-options?view=vs-2022
      - name: Integration Tests
        run: echo "todo" 
      - name: SonarQube Analysis
        run: echo "todo" 
      - name: Quality Gate
        id: quality-step
        run: echo "results=todo" >> $GITHUB_OUTPUT
      - name: Post Actions
        run: echo "todo" 

  artifact_creation_registration:
    name: Artifact Registration and Upload 
    runs-on: ubuntu-latest
    needs: validate_skyline_quality_gate
    env:
      result-artifact-id: none
    outputs:
      artifact-id: ${{ env.result-artifact-id }}
      #artifact-id-development: ${{ steps.upload-step-development.outputs.ARTIFACT_ID }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: readDir
        run: ls   

      - name: Initialize
        run: |
          echo "workspace" ${{ github.workspace }}
          echo "ref name" ${{ inputs.referenceName }}
          echo "run number" ${{ inputs.runNumber }}
          echo "ref type" ${{ inputs.referenceType }}
          echo "repository" ${{ inputs.repository }}

      - name: Set up NuGet
        uses: nuget/setup-nuget@v1.1.1
      
      - name: NuGet restore solution
        run: nuget restore "AutomationScript.sln" -OutputDirectory ${{ github.workspace }}/packages

      - name: (Development) Upload artifact Package
        if: inputs.referenceType == 'branch'
        id: upload-step-development
        env:
          NUGET_PACKAGES: ${{ github.workspace }}/packages
        # uses: SkylineCommunications/Skyline-DataMiner-Deploy-Action@UseReusableModuleNuGets
        uses: SkylineCommunications/Skyline-DataMiner-Deploy-Action/Actions/Dockerfile@UseReusableModuleNuGets
        with:
          # Stage upload
          stage: Upload
          # The API-key generated in the DCP Admin app as authentication for a certain DataMiner System. E.g. g597e77412e34297b827c2570a8fa2bc
          api-key: ${{ secrets.DATAMINER_DEPLOY_KEY }}
          # The path to the .sln file of the solution. Atm only DataMiner Automation Script solutions are supported. E.g ./Example/Script.sln.
          solution-path: ./AutomationScript.sln
          # The chosen name of the artifact. E.g. MyName.
          artifact-name: ${{ inputs.repository }} ${{ inputs.referenceName }}_B${{ inputs.runNumber }}
          # The version number for the artifact (format A.B.C.D). E.g. 1.0.1.1
          build-number: ${{ inputs.runNumber }}
      - name: (Development) Set artifact Id
        if: inputs.referenceType == 'branch'
        run: echo "result-artifact-id=${{ steps.upload-step-development.outputs.ARTIFACT_ID }}" >> $GITHUB_ENV
      - name: (Release) Upload artifact Package
        if: inputs.referenceType == 'tag'
        id: upload-step-release
        uses: SkylineCommunications/Skyline-DataMiner-Deploy-Action/Actions/Dockerfile@UseReusableModuleNuGets
        with:
          # Stage upload
          stage: Upload
          # The API-key generated in the DCP Admin app as authentication for a certain DataMiner System. E.g. g597e77412e34297b827c2570a8fa2bc
          api-key: ${{ secrets.DATAMINER_DEPLOY_KEY }}
          # The path to the .sln file of the solution. Atm only DataMiner Automation Script solutions are supported. E.g ./Example/Script.sln.
          solution-path: ./AutomationScript.sln
          # The chosen name of the artifact. E.g. MyName.
          artifact-name: ${{ env.GITHUB_REPOSITORY }} ${{ inputs.referenceName }}
          # The version number for the artifact (format A.B.C.D). E.g. 1.0.1.1
          version: ${{ inputs.referenceName }}
      - name: (Release) Set artifact Id
        if: inputs.referenceType == 'tag'
        run: echo "result-artifact-id=${{ steps.upload-step-release.outputs.ARTIFACT_ID }}" >> $GITHUB_ENV
      - name: Post Actions
        run: echo  ${{ steps.upload-step-development.outputs.ARTIFACT_ID }}