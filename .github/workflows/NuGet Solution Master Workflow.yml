name: NuGet Solution

# Controls when the workflow will run
on:
  # Allows you to run this workflow from another workflow
  workflow_call:
    outputs:
      quality_gate: 
        description: "Results from Skyline Quality Gate."
        value:  ${{ jobs.validate_skyline_quality_gate.outputs.quality}}
    inputs:
      referenceName:
        required: true
        type: string       
      runNumber:
        required: true
        type: string   
      referenceType:
        required: true
        type: string   
      repository:
        required: true
        type: string 
      owner:
        required: true
        type: string
      sonarCloudProjectName:
        required: true
        type: string
    secrets:
      sonarCloudToken:
        required: true
      pfx:
        required: true
      pfxPassword:
        required: true
      nugetApiKey:
        required: true     

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  validate_skyline_quality_gate:
    name: Skyline Quality Gate 
    runs-on: windows-latest
    env:
      detected-unit-tests: none
    outputs:
      quality: ${{ steps.quality-step.outputs.results}}
    steps:
      - uses: actions/checkout@v3
      - name: Initialize
        run: |
          echo "workspace" ${{ github.workspace }}
          echo "ref name" ${{ inputs.referenceName }}
          echo "run number" ${{ inputs.runNumber }}
          echo "ref type" ${{ inputs.referenceType }}
          echo "repository" ${{ inputs.repository }}

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          dotnet tool install dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Install NuGetToggleOnBuild
        run: dotnet tool install Skyline.DataMiner.CICD.Tools.NuGetToggleOnBuild --global

      - name: Prepare SonarCloud Variables
        id: prepSonarCloudVar
        run: |
          import os
          env_file = os.getenv('GITHUB_ENV')
          with open(env_file, "a") as myfile:
               myfile.write("lowerCaseOwner=" + str.lower("${{ inputs.owner }}"))
        shell: python
        
      - name: Building
        run: dotnet build --configuration Release -nodeReuse:false

      - name: Find created nuget
        id: findcreatednuget        
        run: |
          echo nugetPackageName=$(find . -type f -name '*.nupkg') >> $GITHUB_OUTPUT
        shell: bash    

      - uses: actions/upload-artifact@v3
        with:
          name: NugetPackages
          path: "${{ steps.findcreatednuget.outputs.nugetPackageName }}"

      - name: Disable NuGet On Build
        run: dotnet NuGetToggleOnBuild --setToActive false --workspace \"${workspace}\" --onlyOnConfiguredNuGet false
        
      - name: Unit Tests
        id: unit-tests
        run: dotnet test --filter TestCategory!=IntegrationTest --logger \"trx;logfilename=unitTestResults.trx\" --collect \"XPlat Code Coverage\" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura,opencover
        continue-on-error: true

      - name: Analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
            dotnet tool install --global dotnet-sonarscanner
            dotnet sonarscanner begin /k:"${{ inputs.sonarCloudProjectName }}" /o:"${{ env.lowerCaseOwner }}" /d:sonar.login="${{ secrets.sonarCloudToken }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" /d:sonar.cs.vstest.reportsPaths="**/TestResults/**.trx"
            dotnet build -p:DefineConstants="DCFv1%3BDBInfo%3BALARM_SQUASHING" --configuration Release -nodeReuse:false
            dotnet sonarscanner end /d:sonar.login="${{ secrets.sonarCloudToken }}"
        continue-on-error: true

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: .sonarqube/out/.sonar/report-task.txt
        continue-on-error: true
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.sonarCloudToken }}

      - name: Quality Gate
        id: quality-step
        run: |
          if "${{ steps.unit-tests.outcome }}" == "failure" or "${{ steps.sonarqube-quality-gate-check.outcome }}" == "failure" or "${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}" == "FAILED":
            print("Quality gate failed due to:")
          if "${{ steps.unit-tests.outcome }}" == "failure":
            print("- Test failures")
          if "${{ steps.sonarqube-quality-gate-check.outcome }}" == "failure":
            print("- Could not retrieve SonarCloud quality gate status")
          if "${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}" == "FAILED":
            print("- Code analysis quality gate failed")
          if "${{ steps.unit-tests.outcome }}" == "failure" or "${{ steps.sonarqube-quality-gate-check.outcome }}" == "failure" or "${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}" == "FAILED":
            exit(1)
        shell: python

    # Signing cannot be done from linux environment (https://github.com/dotnet/runtime/issues/48794)
  sign:
      # The type of runner that the job will run on
    runs-on: windows-latest
    needs: validate_skyline_quality_gate
    steps:
      - name: Download Unsigned NuGet
        id: downloadUnsignedNuget
        uses: actions/download-artifact@v3
        with:
          name: NugetPackages
          
      - name: Find Nuget
        id: findcreatednuget        
        run: |
          echo nugetPackageName=$(find . -type f -name '*.nupkg') >> $GITHUB_OUTPUT
        shell: bash  
        
      - name: Download Encrypted Signature File
        id: downloadSignatureFile
        env:
          CERTIFICATE_BASE64: ${{ secrets.pfx }}
        run: 'echo "$CERTIFICATE_BASE64" > encodedSignatureFile'
        shell: bash

      - name: Decrypt Signature File
        id: decryptSignatureFile
        run: certutil -decode encodedSignatureFile Skyline.pfx
        shell: bash
    
      - name: Sign NuGet Package
        run: |
          dotnet nuget sign "${{ steps.findcreatednuget.outputs.nugetPackageName }}" --certificate-path "Skyline.pfx" --timestamper "http://timestamp.comodoca.com/rfc3161" --certificate-password ${{ secrets.pfxPassword }}
        shell: bash
        
      - uses: actions/upload-artifact@v3
        with:
          name: NugetPackages
          path: "${{ steps.findcreatednuget.outputs.nugetPackageName }}"

  push:
    if: inputs.referenceType == 'tag'
    name: push
    runs-on: ubuntu-latest
    needs: sign
    steps:
      - name: Download Signed NuGet
        id: downloadSignedNuGet
        uses: actions/download-artifact@v3
        with:
          name: NugetPackages
          
      - name: Find Nuget
        id: findcreatednuget        
        run: |
          echo nugetPackageName=$(find . -type f -name '*.nupkg') >> $GITHUB_OUTPUT
        shell: bash
        
#     - name: Push to NuGet.org
#         run: |
#         dotnet nuget push "${{ steps.findcreatednuget.outputs.nugetPackageName }}" --api-key ${{ secrets.nugetApiKey }} --source https://api.nuget.org/v3/index.json
#         shell: bash
